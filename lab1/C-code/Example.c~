
#include <math.h>
#include "tiff.h"
#include "allocate.h"
#include "randlib.h"
#include "typeutil.h"

void error(char *name);

int main (int argc, char **argv) 
{
  FILE *fp;
  struct TIFF_img input_img, color_img;

  int32_t i,j,k,l;
  int f_height = 9;
  int f_width = 9;
  float LPF[f_height][f_width]; //create a filter
  double r_value,g_value,b_value;
	
  if ( argc != 2 ) error( argv[0] );

  /* open image file */
  if ( ( fp = fopen ( argv[1], "rb" ) ) == NULL ) {
  //if ( ( fp = fopen ("E:\2016spring\ECE637\lab1_image_filter\Debug\img12.tif", "rb") ) == NULL ) {
    fprintf ( stderr, "cannot open file %s\n", argv[1] );
    exit ( 1 );
  }

  /* read image */
  if ( read_TIFF ( fp, &input_img ) ) {
    fprintf ( stderr, "error reading file %s\n", argv[1] );
    exit ( 1 );
  }

  /* close image file */
  fclose ( fp );

  /* check the type of image data */
  if ( input_img.TIFF_type != 'c' ) {
    fprintf ( stderr, "error:  image must be 24-bit color\n" );
    exit ( 1 );
  }

  /* Allocate image of double precision floats */
  /*img1 = (double **)get_img(input_img.width,input_img.height,sizeof(double));
  img2 = (double **)get_img(input_img.width,input_img.height,sizeof(double));*/

  /* create low pass filter */
  for ( i = 0; i < f_height; i++ )
  for ( j = 0; j < f_width; j++ ) {
    LPF[i][j] = (1/81)*1.0;
  }

  /* set up structure for output achromatic image */
  /* to allocate a full color image use type 'c' */
  //get_TIFF ( &green_img, input_img.height, input_img.width, 'g' );
    
  /* set up structure for output color image */
  /* Note that the type is 'c' rather than 'g' */
  get_TIFF ( &color_img, input_img.height, input_img.width, 'c' );//the output img

 

  /* Illustration: constructing a sample color image -- interchanging the red and green components from the input color image */
  for ( i = 0; i < input_img.height; i++ ){
      for ( j = 0; j < input_img.width; j++ ) {
	  r_value = 0;
	  g_value = 0;
	  b_value = 0;
	  for (k = 0; k < f_height; k++ ){
     		 for ( l = 0; l < f_width; l++ ){
			if ((i-k)>=0 && (j-l)>=0 && (i-k)<input_img.height && (j-l)<input_img.width){
				r_value = r_value + LPF[k][l]*input_img.color[0][i-k][j-l];
				g_value = g_value + LPF[k][l]*input_img.color[1][i-k][j-l];	
				b_value = b_value + LPF[k][l]*input_img.color[2][i-k][j-l];	
				}
			  }	
			}	
		  color_img.color[0][i][j] = (int)r_value;
		  color_img.color[1][i][j] = (int)g_value;
		  color_img.color[2][i][j] = (int)b_value;
      }
}
  
    
    
  /* open color image file */
  if ( ( fp = fopen ( "result_Q3.tif", "wb" ) ) == NULL ) {
      fprintf ( stderr, "cannot open file color.tif\n");
      exit ( 1 );
  }
    
  /* write color image */
  if ( write_TIFF ( fp, &color_img ) ) {
      fprintf ( stderr, "error writing TIFF file %s\n", argv[2] );
      exit ( 1 );
  }
    
  /* close color image file */
  fclose ( fp );

  /* de-allocate space which was used for the images */
  free_TIFF ( &(input_img) );

  free_TIFF ( &(color_img) );

  //system£¨"PAUSE"£©;
  return(0);
}

void error(char *name)
{
    printf("usage:  %s  image.tiff \n\n",name);
    printf("this program reads in a 24-bit color TIFF image.\n");
    printf("It then horizontally filters the green component, adds noise,\n");
    printf("and writes out the result as an 8-bit image\n");
    printf("with the name 'green.tiff'.\n");
    printf("It also generates an 8-bit color image,\n");
    printf("that swaps red and green components from the input image");
    exit(1);
}

